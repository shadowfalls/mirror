{"title":"Introduction to ReactJS","description":"This article will explain some of the basic concepts of ReactJS that you will need to start building Single Page Applications.","categoryId":"reactjs","content":[{"html":"<a href=\"https://reactjs.org\" title=\"https://reactjs.org\" target=\"_blank\">React</a>&nbsp;is a JavaScript framework used to create web applications. React is designed in a way that you can use it as a part of your existing application or create an entire application with it.","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"Create React App","isQuoted":false,"isGist":false,"isMainHeading":true,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"<a href=\"https://github.com/facebook/create-react-app\" title=\"https://github.com/facebook/create-react-app\" target=\"_blank\">Create React App</a>&nbsp;is the most simplest and easiest way to setup react in your local machine. Youâ€™ll need to have Node &gt;= 6 and npm &gt;= 5.2 on your machine. To create a ReactJS application using Create React App, run the following command:","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"npx create-react-app my-app<div>cd my-app</div><div>npm start</div>","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":true,"gist":""},{"html":"Create React App only handles the front-end of your application. You are free to use any back end language that you might be familiar with. It uses&nbsp;<a href=\"https://babeljs.io/\" title=\"https://babeljs.io/\" target=\"_blank\">Babel</a>&nbsp;and&nbsp;<a href=\"https://webpack.js.org/\" title=\"https://webpack.js.org/\" target=\"_blank\">Webpack</a>&nbsp;under the hood, but you don't need to worry about that in this tutorial.","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"You can create the build files with the following command","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"npm run build","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":true,"gist":""},{"html":"Build files are basically the files that you can use for production. The code that you have written will be compressed into only a few files and are optimised in way to run in a server.","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"Introduction to JSX","isQuoted":false,"isGist":false,"isMainHeading":true,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"JSX is a syntax extension to JavaScript. ReactJS application is built with JSX syntax. It looks something like this:","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"let example = &lt;div&gt;A JSX expression&lt;/div&gt;;","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":true,"gist":""},{"html":"This might look weird at first glance but it is the beauty of ReactJS. We can embed expressions into JSX with data that we have, consider the following example:","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"const val = 'Hello World';<div>const sample = &lt;h1&gt;{val}&lt;/h1&gt;;</div><div><br></div><div>ReactDOM.render(</div><div>&nbsp; sample,</div><div>&nbsp; document.getElementById('root')</div><div>);</div>","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":true,"gist":""},{"html":"Notice that the variable <b>val</b>&nbsp;is placed in between curly braces. That is how we can pass data to a JSX expression.","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"We can put any valid JavaScript expression inside the curly braces. After compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.","isQuoted":true,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"Components and Props","isQuoted":false,"isGist":false,"isMainHeading":true,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"Components are the building blocks of a React application. It lets you split your UI code so that they are reusable. You can create a component in React in 2 ways using <b>function</b> and <b>class</b>","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"function MyComponent(props) {<div>&nbsp; return &lt;h1&gt;{props.message}&lt;/h1&gt;;</div><div>}</div>","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":true,"gist":""},{"html":"Basically an function that accepts a single argument <i>props </i>and returns React element is a valid React <b>functional component</b>.&nbsp;","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"class MyComponent extends React.Component {<div>&nbsp; render() {</div><div>&nbsp; &nbsp; return &lt;h1&gt;{this.props.message}&lt;/h1&gt;;</div><div>&nbsp; }</div><div>}</div>","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":true,"gist":""},{"html":"The above is a class component that is equivalent to the previous example. To React both of the above are the same.","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"To render the above component we can use it like any React expression.","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"let example = &lt;MyComponent message=\"Hello World\" /&gt;","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":true,"gist":""},{"html":"Once a component is written we can reuse it","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"function App() {<div>&nbsp; return (</div><div>&nbsp; &nbsp; &lt;div&gt;</div><div>&nbsp; &nbsp; &nbsp; &lt;MyComponent message=\"Hello world\" /&gt;</div><div>&nbsp; &nbsp; &nbsp; &lt;MyComponent message=\"Good morning\" /&gt;</div><div>&nbsp; &nbsp; &nbsp; &lt;MyComponent message=\"Welcome\" /&gt;</div><div>&nbsp; &nbsp; &lt;/div&gt;</div><div>&nbsp; );</div><div>}</div><div><br></div><div>ReactDOM.render(</div><div>&nbsp; &lt;App /&gt;,</div><div>&nbsp; document.getElementById('root')</div><div>);</div>","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":true,"gist":""},{"html":"State in React","isQuoted":false,"isGist":false,"isMainHeading":true,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"We use <b>state</b> in react to update the component. <b>state</b> is a reserved key word in React class component. Consider the following example:","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"","isQuoted":false,"isGist":true,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":"7e89463dc6008d2a2e18274d60ebdc0a"},{"html":"The above component has a constructor that has a argument called props (which stands for properties). The properties need to be sent back to the parent class with <b>super(props)</b>. Other wise the component will not render.","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"Note that we have a object called state in the constructor which has a value&nbsp;<b>count </b>which&nbsp;is used to update and display on the page.","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"The&nbsp;<b>componentDidMount() </b>method<b>&nbsp;</b>is a React life cycle method that will be called once the component has been rendered. Inside the <b>componentDidMount()</b>&nbsp;we have simple plain JavaScript setInterval() method, and inside the method's callback you will see a function call to <b>this.setState(). </b>There is an anonymous function written inside it. <b>setState()</b> function can accept both a function as well as an object. This function is part of react and it will update the state of the component.","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"&nbsp;this.setState((prevState) =&gt; {<div>&nbsp; &nbsp; &nbsp; &nbsp; prevState.count++;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return prevState;</div><div><span style=\"font-size: 1rem;\">});</span></div>","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":true,"gist":""},{"html":"The above code will increments the count. Where ever you call the setState() function inside the component it will automatically run the render() method with the updated values. This is what renders the count each second.","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"You should not change state directly","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"<div>// incorrect</div>this.state.count++;","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":true,"gist":""},{"html":"You should always update it through the set state method","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""},{"html":"<div>// correct</div>this.setState({count: 1});","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":true,"gist":""},{"html":"","isQuoted":false,"isGist":false,"isMainHeading":false,"isSubHeading":false,"isCodeSection":false,"gist":""}],"date":"2019-06-16T00:00:00.000Z","readTimeMin":"8"}